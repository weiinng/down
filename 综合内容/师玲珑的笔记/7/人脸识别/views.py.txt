from django.shortcuts import render,redirect,reverse,HttpResponse
from ren import settings
from . import models
import sys
import importlib
import cv2
import os
import time
importlib.reload(sys)
# Create your views here.


def if_login(func):
    def inner(request):
        try:
            img=request.session['img']
            return func(request)
        except:
            return redirect(reverse('login'))
    return inner

@if_login
def index(request):
    return render(request,'index.html')

def login(request):
    login,reg,login2='1','1','1'
    if request.method=='POST':
        new=request.FILES.get('img')
        new_url=os.path.join(settings.STATICFILES_DIRS[0],new.name)
        with open(new_url,'wb') as f:
            f.write(new.read())
        #定义图片地址
        i=new_url
        #读图
        image = cv2.imread(i)
        #定义模型地址
        face_cascade = cv2.CascadeClassifier('D:/python3/Lib/site-packages/cv2/data/haarcascade_frontalface_default.xml')
        #探测人脸
        faces = face_cascade.detectMultiScale(image,scaleFactor=1.15,minNeighbors=5,minSize=(5,5),flags=cv2.IMREAD_GRAYSCALE)
        f=models.People.objects.filter(img=str(faces)).first()
        if f:
            request.session['img']='1'
            return redirect(reverse('index'))
        else:
            message='登陆失败'
    return render(request,'reg.html',locals())


def reg(request):
    reg2,login,login2='1','1','1'
    if request.method=='POST':
        new=request.FILES.get('img')
        new_url=os.path.join(settings.STATICFILES_DIRS[0],new.name)
        with open(new_url,'wb') as f:
            f.write(new.read())
        #定义图片地址
        i=new_url
        #读图
        image = cv2.imread(i)
        #定义模型地址
        face_cascade = cv2.CascadeClassifier('D:/python3/Lib/site-packages/cv2/data/haarcascade_frontalface_default.xml')
        #探测人脸
        faces = face_cascade.detectMultiScale(image,scaleFactor=1.15,minNeighbors=5,minSize=(5,5),flags=cv2.IMREAD_GRAYSCALE)
        
        f=models.People.objects.filter(img=str(faces)).first()
        if not f and len(faces)>0:
            models.People.objects.create(img=faces)
        print("一共找到了{0}个人脸".format(len(faces)))

        #勾选人脸
        # for(x,y,w,h) in faces:
        #     #圆圈固定写法
        #     cv2.circle(image,((x+x+w) // 2,(y+y+h) // 2 ),(w // 2),(0,255,0),2)

        # cv2.imshow('find face',image)
        # cv2.waitKey(0)
        # cv2.destroyAllWindows()
    return render(request,'reg.html',locals())

@if_login
def exit(request):
    del request.session['img']
    return redirect(reverse('login'))

def face_reg(request):
    reg,login2,reg2='1','1','1'
    cv2.namedWindow("shibie")
    #1调用摄像头
    cap=cv2.VideoCapture(0)
    #2人脸识别器分类器
    classfier=cv2.CascadeClassifier("D:/python3/Lib/site-packages/cv2/data/haarcascade_frontalface_default.xml")
    while cap.isOpened():
        ok,frame=cap.read()
        if not ok:
            break
        #2灰度转换
        grey=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)
        #人脸检测，1.2和2分别为图片缩放比例和需要检测的有效点数
        faceRects = classfier.detectMultiScale(grey, scaleFactor = 1.2, minNeighbors = 3, minSize = (32, 32))
        if len(faceRects) > 0:                          
            for faceRect in faceRects:  #单独框出每一张人脸
                f=models.People.objects.filter(img=str(faceRect)).first()
                if not f:
                    models.People.objects.create(img=faceRect)
                x, y, w, h = faceRect        
                cv2.rectangle(frame, (x - 10, y - 10), (x + w + 10, y + h + 10), (0,255,0), 3)
        cv2.imshow("shibie",frame)
        if cv2.waitKey(10)&0xFF==ord('q'):
            break
    return render(request,'reg.html',locals())

def face_login(request):
    login2,login,reg2='1','1','1'
    cv2.namedWindow("shibie")
    #1调用摄像头
    cap=cv2.VideoCapture(0)
    #2人脸识别器分类器
    classfier=cv2.CascadeClassifier("D:/python3/Lib/site-packages/cv2/data/haarcascade_frontalface_default.xml")
    while cap.isOpened():
        ok,frame=cap.read()
        if not ok:
            break
        #2灰度转换
        grey=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)
        #人脸检测，1.2和2分别为图片缩放比例和需要检测的有效点数
        faceRects = classfier.detectMultiScale(grey, scaleFactor = 1.2, minNeighbors = 3, minSize = (32, 32))
        if len(faceRects) > 0:                          
            for faceRect in faceRects:  #单独框出每一张人脸
                f=models.People.objects.filter(img=str(faceRect)).first()
                if f:
                    request.session['img']='1'
                    return redirect(reverse('index'))
                    break
                x, y, w, h = faceRect        
                cv2.rectangle(frame, (x - 10, y - 10), (x + w + 10, y + h + 10), (0,255,0), 3)
        cv2.imshow("shibie",frame)
        if cv2.waitKey(10)&0xFF==ord('q'):
            break
    return render(request,'reg.html',locals())