# 假如有一个模型在测试集上得到的预测结果为： 

y_true = [1, 0, 0, 2, 1, 0, 3, 3, 3] # 实际的类别 

y_pred = [1, 1, 0, 2, 1, 0, 1, 3, 3] # 模型预测的类别
 
# 使用sklearn 模块计算混淆矩阵 

from sklearn.metrics import confusion_matrix 
confusion_mat = confusion_matrix(y_true, y_pred) 
print(confusion_mat) #看看混淆矩阵长啥样


#混淆矩阵可视化 

from matplotlib import pyplot as plt 
%matplotlib inline 
import numpy as np 
import itertools

# 可视化混淆矩阵 

def plot_confusion_matrix(confusion_mat):    
	'''将混淆矩阵画图并显示出来'''    
	plt.imshow(confusion_mat, interpolation='nearest', cmap=plt.cm.Blues)    
	plt.title('Confusion matrix')    
	plt.colorbar()    
	tick_marks = np.arange(confusion_mat.shape[0])    
	plt.xticks(tick_marks, tick_marks)    
	plt.yticks(tick_marks, tick_marks)    
	thresh = confusion_mat.max() / 2.    
	for i, j in itertools.product(range(confusion_mat.shape[0]), range(confusion_mat.shape[1])):        
		plt.text(j, i, confusion_mat[i, j],horizontalalignment="center",color="white" if confusion_mat[i, j] > thresh else "black")
    	plt.tight_layout()    
	plt.ylabel('True label')    
	plt.xlabel('Predicted label')    
	plt.show()
 
plot_confusion_matrix(confusion_mat)


