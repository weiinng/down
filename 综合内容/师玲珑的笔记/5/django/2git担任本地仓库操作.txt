创建项目：
在D盘创建test文件夹，表示是工作项目

创建本地仓库：
进入到test,并创建本地仓库 .git
新创建的本地仓库 .git是个空仓库
命令如下：
cd d:
d:
cd py
cd test
git init

创建本地仓库 .git后
配置个人信息：
git config user.name '张三'
git config user.email 'zhansgan@163.com'

配置个人信息后
在test文件夹里的.git文件夹里的config以文本的方式打开  里面有配置的内容
默认不配置的话，会使用全局配置里面的用户名和邮箱 全局git配置文件路径：~/.gitconfig

新建py文件
在项目文件test里创建login.py文件，用于版本控制演示
在项目文件test里面创建 login.py文件 ，用于版本控制演示
test文件夹里的 
.git是本地仓库管理源代码   
login.py是书写源代码

查看文件状态
红色表示新建文件或者新修改的文件，都在工作区
绿色标识文件在暂存区
新建的login.py文件在工作区，需要添加到暂存区并提交到仓库区

git status 查看文件状态的命令

将工作区文件添加到暂存区
#添加项目中所有文件
git add .
或者
#添加指定文件
git add login.py

将暂存区文件提交到仓库区
commit 会生成一条版本记录
- m 后面是版本描述信息
git commit -m '版本描述'       #提交到仓库区

[master (root-commit) 845d981] 立项   #845b981是版本号             
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 login.py


接下来就可以在login.py文件中编辑代码

代码编辑完成后即可进行add和commit操作
提示：添加和提交合并命令
git commit -am '版本描述'

commit 845d9814cf98196d0acc91b3e42b207b7015363e    #版本号
Author: 张三 <zhansgan@163.com>        #谁提交的代码
Date:   Wed Mar 13 16:14:03 2019 +0800       #提交代码的时间

    立项


提交两次代码，会有两个版本记录
num1=10
num2=20

查看历史版本
git log
或者
git reflog

git reflog 可以查看所有分支的所有操作记录（包括commit和reset的操作），包括已经被删除的commit记录，git log则不能查看已经删除了的commit记录

回退版本
方案一：
HEAD 表示当前最新版本
HEAD^ 表示当前最新版本的前一个版本
HEAD^^ 表示当前版本的强两个版本 以此类推
HEAD~1 表示当前最新版本的前一个版本
HEAD~10 表示当前最新版本的前十个版本，以此类推
git reset --hard HEAD^

方案二：当版本非常多时可选择的方案
通过每个版本的版本号回退到指定版本
git reset --hard 版本号

撤销修改
只能撤销工作区、暂存区的代码，不能撤销仓库区的代码
撤销仓库区 的代码就相当于回退版本操作
撤销工作区代码：
	新加代码 num3=30,不add 到暂存区，保留在工作区
	git checkout 文件名
撤销暂存区代码
新加代码：num3=30，并add到暂存区
第一步： 将暂存区代码撤销到工作区
git reset HEAD 文件名
第二步：撤销工作区代码
git checkout 文件名


对比版本
对比版本库与工作区
新加代码 num3=30, 不 add到暂存区，保留在工作区
git diff HEAD -- login.py

对比版本库
新加代码 num3=30,并add到暂存区
git diff HEAD HEAD^ --login.py

删除文件：删除文件分为确定删除和误删
在项目中新建test.py文件，并添加和提交到仓库
确定删除处理：
#删除文件
rm 文件名
#git 确定删除文件，对比添加文件 git add
git rm 文件名
#删除后记录删除操作版本
git commit -m '删除描述'

误删处理：撤销修改即可：
#删除文件
rm 文件名
#git 撤销修改
git checkout -- 文件名




