上下文：相当于一个容器，保存了Flask程序运行过程中的一些信息
Flask中有两种上下文，请求上下文和应用上下文

――――――――――――――――――――――――――
请求上下文（request context)
思考：在试图函数中，如何取到当前请求的相关数据？比如：请求地址，请求方式，cookie等等
在flask中，可以直接在视图函数中使用request这个对象进行获取相关数据，而request就是请求上下文的对象，保存了当前本次请求的相关数据，请求上下文对象有：request,session

request:
封装了HTTP请求的内容，针对的是http请求。举例：user=request.args.get('user'),获取的是get请求的参数

session：
用来记录请求会话中的信息，针对的是用户信息，举例：session['name']=user.id,可以记录用户信息，还可以通过session.get['name']获取用户信息

――――――――――――――――――――――――――
应用上下文对象有：current_app , g
current_app
应用程序上下文用于存储应用程序中的变量，可以通过current_app.name打印当前app的名称，也可以在current_app中存储一些变量，例如：
应用的启动脚本是哪个文件，启动时指定了哪些参数
加载了哪些配置文件，导入了哪些配置
连了那个数据库
有哪些public的工具类，常量
应用跑在那个机器上，IP多少，内存多大
current_app.name
current_app.text_value='value'

g变量
g作为flask程序全局的一个临时变量，充当着中间媒介的作用，我们可以通过它传递一些数据，g保存的是当前请求的全局变量，不同的请求会有不同的全局变量，通过不同的thread id区别

g.name='abc'
注意：不同的请求，会有不同的全局变量

两者区别：
请求上下文：保存了客户端和服务器交互的数据
应用上下文:flask应用程序运行过程中，保存的一些配置信息，比如程序名、数据库连接、应用信息等
上下文中的对象只能在指定上下文使用，超出范围不能使用， 请求上下文和应用上下文原理实现：https://segmentfault.com/a/1190000004223296

