在开发过程中，需要修改数据库模型，而且还要再修改之后更新数据库，最直接的方式就是删除旧表，但这样会丢失数据，更好的解决办法是使用数据库迁移框架，他可以追踪数据库模式的变化，然后把变动应用到数据库中。
在Flask中可以使用Flask-Migrate扩展，来实现数据库迁移。并且集成到Flask-Script中，所有操作通过命令就能完成，为了导出数据库迁移命令，Flask-Migrate提供了一个MigrateCommand类，可以附加到flask-script的manager对象上。

首先要在虚拟环境中安装Flask-Migrate

pip install flask-migrate

创建迁移仓库
#这个命令会创建migrations文件夹，所有迁移文件都放在里面
python py文件名.py db init

创建迁移脚本
自动创建迁移脚本有两个函数
1.upgrade():函数把迁移中的改动应用到数据库中
2.downgrade():函数则将改动删除

自动创建的迁移脚本会根据模型定义和数据库当前状态的差异，生成upgrade()和downgrade()函数的内容。对比不一定完全正确，有可能会遗漏一些细节，需要进行检查

python py文件名.py db migrate -m 'initial migrationn'

更新数据库
python py文件名.py db update

返回以前的版本
可以根据history命令找到版本号，然后传给downgrade命令
python app.py db history

输出格式：<base> -> 版本号 (head),initial migration

回滚到指定版本
python app.py db downgrade 版本号

实际操作顺序：
1、python 文件 db init
2、python 文件 db migrate -m '版本名(注释)'
3、python 文件 db upgrade 然后观察表结构
4、根据需求修改模型
5.python 文件 db migrate -m"新版本名(注释)"
6.python 文件 db upgrade 然后观察表结构
7.若返回版本,则利用 python 文件 db history查看版本号
8.python 文件 db downgrade(upgrade) 版本号


